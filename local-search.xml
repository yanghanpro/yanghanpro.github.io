<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot 整合</title>
    <link href="/2020/01/30/SpringBoot%20%E6%95%B4%E5%90%88/"/>
    <url>/2020/01/30/SpringBoot%20%E6%95%B4%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h2 id="将要做的几件事"><a href="#将要做的几件事" class="headerlink" title="将要做的几件事"></a>将要做的几件事</h2><blockquote><p><strong>整合SpringMVC</strong></p><ol><li>修改端口（server.port=8888）</li><li>访问静态资源（classpath:META/resources | classpath:resources | classpath:static |classpath:public）</li><li>配置拦截器<ol><li>自定义拦截器：实现HandlerInterceptor接口</li><li>配置拦截器：自定义一个Java配置类（@Configuration），实现WebMvcConfigurer接口</li></ol></li></ol><p><strong>整合数据源</strong></p><ol><li>引入jdbc启动器，mysql驱动</li><li>添加配置<ol><li>spring.datasource.url</li><li>spring.datasource.username</li><li>spring.datasource.password</li></ol></li></ol><p><strong>整合Mybatis</strong></p><ol><li>引入启动器</li><li>覆盖默认配置<ol><li>mybatis.type-aliases-package=com.yang.boot.bean</li><li>mybatis.mapper-locations=<code>classpath:mybatis/mappers/**/*.xml</code></li><li>代码：定义一个接口，在接口上加入@Mapper注解</li></ol></li></ol><p><strong>整合通用Mapper</strong></p><ol><li>引入启动器</li><li>代码：接口继承<code>Mapper</code></li></ol><p><strong>整合事务</strong></p><ol><li>添加@Transactional</li></ol></blockquote><h2 id="1-整合-SpringMVC"><a href="#1-整合-SpringMVC" class="headerlink" title="1. 整合 SpringMVC"></a>1. 整合 SpringMVC</h2><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200125204045.png" alt="img"></p><p>(0) 项目结构：</p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200125232518.png" alt="img"></p><p>(1) 拦截器： <code>com.yang.demospringmvc.interceptor.MyInterceptor.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.boot.demospringmvc.interceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line">import org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line">@Component  &#x2F;&#x2F;注册到spring容器中</span><br><span class="line">public class MyInterceptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request,</span><br><span class="line">                             HttpServletResponse response,</span><br><span class="line">                             Object handler) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;前置方法正在执行...&quot;);</span><br><span class="line">        &#x2F;&#x2F; 返回值 true:放行 false:拦截</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request,</span><br><span class="line">                           HttpServletResponse response,</span><br><span class="line">                           Object handler,</span><br><span class="line">                           ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;后置方法正在执行...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request,</span><br><span class="line">                                HttpServletResponse response,</span><br><span class="line">                                Object handler,</span><br><span class="line">                                Exception ex) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;完成方法正在执行...&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(2) 自定义拦截器配置类：<code>com.yang.demospringmvc.config.WebMvcCOnfiguration.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.boot.demospringmvc.config;</span><br><span class="line"></span><br><span class="line">import com.yang.boot.demospringmvc.interceptor.MyInterceptor;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line">import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 1. 声明这是一个配置类</span><br><span class="line"> * 2. 实现 WebMvcConfigurer 接口</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfiguration implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private MyInterceptor myInterceptor;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        &#x2F;&#x2F; &quot;&#x2F;*&quot;表示所有单级请求   &quot;&#x2F;**&quot;表示所有多级请求</span><br><span class="line">        registry.addInterceptor(myInterceptor).</span><br><span class="line">                addPathPatterns(&quot;&#x2F;**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3) 控制器：<code>com.yang.demospringmvc.controller.UserController.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.boot.demospringmvc.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;hello&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) 全局配置文件：<code>application.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 修改服务器端口</span><br><span class="line">server.port&#x3D;8888</span><br><span class="line"># 修改日志级别</span><br><span class="line">logging.level.org.springframework&#x3D;DEBUG</span><br></pre></td></tr></table></figure><p>(5) 引导类：<code>com.yang.demospringmvc.DemoSpringmvcApplication.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.boot.demospringmvc;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DemoSpringmvcApplication &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(DemoSpringmvcApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(6) 输出结果</p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200125232107.png" alt="img"></p><h2 id="2-整合数据源-内置"><a href="#2-整合数据源-内置" class="headerlink" title="2. 整合数据源[内置]"></a>2. 整合数据源[内置]</h2><p><code>SpringBoot</code> 默认数据源为 <code>HikariCP</code>，是一个高性能的JDBC连接池，性能高。</p><p>(1) 引入依赖：<code>pom.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>(2) 全局配置文件：<code>application.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 修改服务器端口</span><br><span class="line">server.port&#x3D;8888</span><br><span class="line"># 修改日志级别</span><br><span class="line">logging.level.org.springframework&#x3D;DEBUG</span><br><span class="line"></span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;springboot</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;123456</span><br></pre></td></tr></table></figure><h2 id="3-整合Mybatis"><a href="#3-整合Mybatis" class="headerlink" title="3. 整合Mybatis"></a>3. 整合Mybatis</h2><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126110900.png" alt="img"></p><p>(1) 导入依赖：<code>pom.xml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis.spring.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 通用Mapper,作者开发的 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;tk.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mapper-spring-boot-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.2&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>(2) 全局配置文件：<code>application.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 修改服务器端口</span><br><span class="line">server.port&#x3D;8888</span><br><span class="line"># 修改日志级别</span><br><span class="line">logging.level.org.springframework&#x3D;DEBUG</span><br><span class="line"></span><br><span class="line">spring.datasource.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;springboot</span><br><span class="line">spring.datasource.username&#x3D;root</span><br><span class="line">spring.datasource.password&#x3D;123456</span><br><span class="line"></span><br><span class="line">mybatis.type-aliases-package&#x3D;com.yang.boot.demospringmvc.bean</span><br><span class="line">#mybatis-mapper-locations&#x3D;clsspath:mybatis&#x2F;mappers&#x2F;**&#x2F;*.xml</span><br></pre></td></tr></table></figure><p>(3) 实体类：<code>com.yang.boot.demospringboot.bean.User.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.boot.demospringmvc.bean;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import org.hibernate.validator.constraints.ISBN;</span><br><span class="line"></span><br><span class="line">import javax.persistence.GeneratedValue;</span><br><span class="line">import javax.persistence.GenerationType;</span><br><span class="line">import javax.persistence.Id;</span><br><span class="line">import javax.persistence.Table;</span><br><span class="line"></span><br><span class="line">@Table(name &#x3D; &quot;tb_user&quot;)</span><br><span class="line">public class User &#123;</span><br><span class="line">    @Id</span><br><span class="line">    @GeneratedValue(strategy &#x3D; GenerationType.IDENTITY)</span><br><span class="line">    private Long id;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line">    &#x2F;&#x2F;getter setter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(4) Mybatis 映射接口：<code>com.yang.boot.demospringboot.mapper.UserMapper.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.boot.demospringmvc.mapper;</span><br><span class="line"></span><br><span class="line">import com.yang.boot.demospringmvc.bean.User;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 整合Mybatis：需要实现通用 Mapper 接口</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserMapper extends tk.mybatis.mapper.common.Mapper&lt;User&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-整合事务"><a href="#4-整合事务" class="headerlink" title="4. 整合事务"></a>4. 整合事务</h2><p>Maven已经将<code>org.springframework:spring.tx</code>依赖导入了，因此无需再导入依赖。</p><p>业务层：<code>com.yang.boot.demospringboot.UserService.java</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.boot.demospringmvc.service;</span><br><span class="line"></span><br><span class="line">import com.yang.boot.demospringmvc.bean.User;</span><br><span class="line">import com.yang.boot.demospringmvc.mapper.UserMapper;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line">import org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    public User queryUserById(Long id)&#123;</span><br><span class="line">        return this.userMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Transactional</span><br><span class="line">    public void deleteUserById(Long id)&#123;</span><br><span class="line">        this.userMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试整合结果"><a href="#测试整合结果" class="headerlink" title="测试整合结果"></a>测试整合结果</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.boot.demospringmvc.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.yang.boot.demospringmvc.bean.User;</span><br><span class="line">import com.yang.boot.demospringmvc.service.UserService;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 通过ID查询用户</span><br><span class="line">    @GetMapping(&quot;&#123;id&#125;&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public User queryUserById(@PathVariable(&quot;id&quot;)Long id)&#123;</span><br><span class="line">        return this.userService.queryUserById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;hello&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String hello()&#123;</span><br><span class="line">        return &quot;hello&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126113739.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot 入门</title>
    <link href="/2020/01/30/SpringBoot%20%E5%85%A5%E9%97%A8/"/>
    <url>/2020/01/30/SpringBoot%20%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><h2 id="第一个SprinBoot程序"><a href="#第一个SprinBoot程序" class="headerlink" title="第一个SprinBoot程序"></a>第一个SprinBoot程序</h2><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126134134.png" alt="img"></p><p>引入启动器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;-- 所有的springboot都要继承该父工程 --&gt;</span><br><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.2.4.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;relativePath&#x2F;&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;-- web启动器 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>控制器类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.demo.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;demo&quot;)</span><br><span class="line">public class DemoController &#123;</span><br><span class="line">    </span><br><span class="line">    @RequestMapping(&quot;hello&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String Hello()&#123;</span><br><span class="line">        return &quot;hello springboot!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>引导类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.demo;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @SpringBootApplication &#x3D; </span><br><span class="line"> *      * @EnableAutoConfiguration：启用自动配置</span><br><span class="line"> *      * @ComponentScan：开启注解扫描</span><br><span class="line"> *      * SpringBootConfiguration：作用等同于@Configuration，表示该类是一个配置类，不同的是一个工程只包含一个该注解</span><br><span class="line"> *&#x2F;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果</p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126133018.png" alt="img"></p><h2 id="自定义配置类"><a href="#自定义配置类" class="headerlink" title="自定义配置类"></a>自定义配置类</h2><p>SpringBoot内部已经配置了一百多个配置类（真是贴心啊），我们可以直接使用</p><p>当我们需要其他的配置类时，我们也可以自定义一个配置类</p><p>回顾以前SSM配置数据库连接池的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean name&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method&#x3D;&quot;init&quot; destroy-method&#x3D;&quot;close&quot;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;driverClassName&quot; value&#x3D;&quot;$&#123;jdbc.driverClassName&#125;&quot; &#x2F;&gt; </span><br><span class="line">    &lt;property name&#x3D;&quot;url&quot; value&#x3D;&quot;$&#123;jdbc.url&#125;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;username&quot; value&#x3D;&quot;$&#123;jdbc.username&#125;&quot; &#x2F;&gt;</span><br><span class="line">    &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;$&#123;jdbc.password&#125;&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>SpringBoot使用Java配置类，来代替xml配置：</p><blockquote><p>@Configuration：声明一个类作为配置类，代替<code>xml</code>文件</p><p>@Bean：声明在方法上，将方法的返回值加入spring容器，代替``标签</p><p>@PropertySource：指定外部属性文件</p><p>@Value：属性注入</p></blockquote><h3 id="传统配置类"><a href="#传统配置类" class="headerlink" title="传统配置类"></a>传统配置类</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126135650.png" alt="img"></p><p>引入启动器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.drtrang&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid-spring-boot2-starter&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.10&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>jdbc配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;&#x2F;speingboot</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;123456</span><br></pre></td></tr></table></figure><p>java配置类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.demo.config;</span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line">import org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span><br><span class="line">public class jdbcConfiguration &#123;</span><br><span class="line">    </span><br><span class="line">    @Value(&quot;$&#123;jdbc.driverClassName&#125;&quot;)</span><br><span class="line">    private String driverClassName;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.url&#125;&quot;)</span><br><span class="line">    private String url;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.username&#125;&quot;)</span><br><span class="line">    private String username;</span><br><span class="line">    @Value(&quot;$&#123;jdbc.password&#125;&quot;)</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public DataSource dataSource()&#123;</span><br><span class="line">        DruidDataSource dataSource &#x3D; new DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(this.driverClassName);</span><br><span class="line">        dataSource.setUrl(this.url);</span><br><span class="line">        dataSource.setUsername(this.username);</span><br><span class="line">        dataSource.setPassword(this.password);</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.demo.controller;</span><br><span class="line"></span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;demo&quot;)</span><br><span class="line">public class DemoController &#123;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    private DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;hello&quot;)</span><br><span class="line">    @ResponseBody</span><br><span class="line">    public String Hello()&#123;</span><br><span class="line">        return &quot;hello springboot!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringBoot配置类"><a href="#SpringBoot配置类" class="headerlink" title="SpringBoot配置类"></a>SpringBoot配置类</h3><p>接下来使用SpringBoot来进行连接池配置：</p><p>思路：使用SpringBoot内置的属性配置文件，将读取属性的步骤单独抽取出来，达到复用的效果</p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126153106.png" alt="img"></p><p>属性配置文件：<code>application.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;&#x2F;speingboot</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;123456</span><br></pre></td></tr></table></figure><p>读取属性的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.demo.config;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;jdbc&quot;) &#x2F;&#x2F;读取资源配置类中，前缀为jdbc的属性</span><br><span class="line">public class JdbcProperties &#123;</span><br><span class="line"></span><br><span class="line">    private String driverClassName;</span><br><span class="line">    private String url;</span><br><span class="line">    private String username;</span><br><span class="line">    private String password;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;getter setter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.demo.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">import javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line">@Configuration</span><br><span class="line">@EnableConfigurationProperties(JdbcProperties.class) &#x2F;&#x2F;启动资源配置读取类</span><br><span class="line">public class jdbcConfiguration &#123;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 方法1 @Autowired注入</span><br><span class="line">    @Autowired</span><br><span class="line">    private JdbcProperties jdbcProperties;</span><br><span class="line"></span><br><span class="line">    @Bean </span><br><span class="line">    public DataSource dataSource()&#123;</span><br><span class="line">        DruidDataSource dataSource &#x3D; new DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(this.jdbcProperties.getDriverClassName());</span><br><span class="line">        dataSource.setUrl(this.jdbcProperties.getUrl());</span><br><span class="line">        dataSource.setUsername(this.jdbcProperties.getUsername());</span><br><span class="line">        dataSource.setPassword(this.jdbcProperties.getPassword());</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性注入的4种方法"><a href="#属性注入的4种方法" class="headerlink" title="属性注入的4种方法"></a>属性注入的4种方法</h3><p>上述配置类，使用@Autowired注入了属性，还可以采用其他方式注入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 方法1 @Autowired注入</span><br><span class="line">@Autowired</span><br><span class="line">private JdbcProperties jdbcProperties;</span><br><span class="line">&#x2F;&#x2F; 方法2 构造器参数注入</span><br><span class="line">private JdbcProperties jdbcProperties;</span><br><span class="line">public jdbcConfiguration(JdbcProperties jdbcProperties)&#123;</span><br><span class="line">    this.jdbcProperties &#x3D; jdbcProperties;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 方法3 作为形参注入</span><br><span class="line">@Bean</span><br><span class="line">public DataSource dataSource(JdbcProperties jdbcProperties)&#123;</span><br><span class="line">    DruidDataSource dataSource &#x3D; new DruidDataSource();</span><br><span class="line">    dataSource.setDriverClassName(jdbcProperties.getDriverClassName());</span><br><span class="line">    dataSource.setUrl(jdbcProperties.getUrl());</span><br><span class="line">    dataSource.setUsername(jdbcProperties.getUsername());</span><br><span class="line">    dataSource.setPassword(jdbcProperties.getPassword());</span><br><span class="line">    return dataSource;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 方法4 @Bean + @ConfigurationProperties</span><br><span class="line">@Configuration</span><br><span class="line">public class jdbcConfiguration &#123;</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 将jdbcProperties.java的ConfigurationProperties移动到此处</span><br><span class="line">    @Bean</span><br><span class="line">    @ConfigurationProperties(prefix &#x3D; &quot;jdbc&quot;) &#x2F;&#x2F;读取资源配置类中，前缀为jdbc的属性</span><br><span class="line">    public DataSource dataSource()&#123;</span><br><span class="line">        DruidDataSource dataSource &#x3D; new DruidDataSource();</span><br><span class="line">        return dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot thymeleaf</title>
    <link href="/2020/01/30/SpringBoot%20thymeleaf/"/>
    <url>/2020/01/30/SpringBoot%20thymeleaf/</url>
    
    <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>SpringBoot不支持jsp，但是支持一些模板引擎技术</p><p>主流的模板引擎技术：</p><blockquote><p>FreeMarker</p><p>==Thymeleaf==</p><p>Mustache</p></blockquote><p>SpringBoot 常用的模板引擎技术是<code>Thymeleaf</code></p><p><code>Thymeleaf</code>可以完全替代JSP，有以下4个特点：</p><blockquote><p>动静结合（有无网络均可运行）</p><p>开箱即用</p><p>多方言支持</p><p>与SpringBoot完美整合</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thymeleaf&#96;默认解析位置：&#96;src&#x2F;main&#x2F;resources&#x2F;templates&#x2F;xxx.html</span><br></pre></td></tr></table></figure><h2 id="第一个thymeleaf程序"><a href="#第一个thymeleaf程序" class="headerlink" title="第一个thymeleaf程序"></a>第一个thymeleaf程序</h2><p>以下配置是基于SpringBoot整合的基础上，若没有配置，请移步配置。</p><p>引入启动器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure><p>修改默认配置：</p><p>thymeleaf会在第一次对模板解析之后进行缓存，提高了并发处理能力</p><p>但是给开发带来了不便（修改页面并不会立即看到效果），因此在<code>开发阶段</code>关闭缓存。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 关闭thymeleaf缓存</span><br><span class="line">spring.thymeleaf.cache&#x3D;false</span><br></pre></td></tr></table></figure><p>DAO层接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.boot.demospringmvc.mapper;</span><br><span class="line"></span><br><span class="line">import com.yang.boot.demospringmvc.bean.User;</span><br><span class="line">import org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 整合Mybatis：需要实现通用 Mapper 接口</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Mapper</span><br><span class="line">public interface UserMapper extends tk.mybatis.mapper.common.Mapper&lt;User&gt; &#123;&#125;</span><br></pre></td></tr></table></figure><p>业务层：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.boot.demospringmvc.service;</span><br><span class="line"></span><br><span class="line">import com.yang.boot.demospringmvc.bean.User;</span><br><span class="line">import com.yang.boot.demospringmvc.mapper.UserMapper;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class UserService &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    public List&lt;User&gt; queryAllUser()&#123;</span><br><span class="line">        return this.userMapper.selectAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制层：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">package com.yang.boot.demospringmvc.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import com.yang.boot.demospringmvc.bean.User;</span><br><span class="line">import com.yang.boot.demospringmvc.service.UserService;</span><br><span class="line">import org.apache.logging.log4j.message.ReusableMessage;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Controller;</span><br><span class="line">import org.springframework.ui.Model;</span><br><span class="line">import org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private UserService userService;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;all&quot;)</span><br><span class="line">    public String queryAllUser(Model model)&#123;</span><br><span class="line">        List&lt;User&gt; userList &#x3D; this.userService.queryAllUser();</span><br><span class="line">        model.addAttribute(&quot;userList&quot;,userList);</span><br><span class="line">        return &quot;users&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot; xmlns:th&#x3D;&quot;http:&#x2F;&#x2F;www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;用户列表&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;th&gt;ID&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;姓名&lt;&#x2F;th&gt;</span><br><span class="line">                &lt;th&gt;密码&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;tr th:each&#x3D;&quot;user:$&#123;userList&#125;&quot;&gt;</span><br><span class="line">                &lt;td th:text&#x3D;&quot;$&#123;user.id&#125;&quot;&gt;1&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td th:text&#x3D;&quot;$&#123;user.username&#125;&quot;&gt;张三&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td th:text&#x3D;&quot;$&#123;user.password&#125;&quot;&gt;333&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126125027.png" alt="img"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>java内部类</title>
    <link href="/2020/01/30/java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <url>/2020/01/30/java%E5%86%85%E9%83%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>成员内部类 （~成员变量）</p><p>静态成员内部类（~静态成员变量）</p><p>局部内部类（~局部变量）</p><p>匿名内部类</p><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>成员内部类，就像是类的成员一样</p><h3 id="1-成员内部类定义的位置"><a href="#1-成员内部类定义的位置" class="headerlink" title="(1) 成员内部类定义的位置"></a>(1) 成员内部类定义的位置</h3><blockquote><p>与成员变量和成员方法<strong>同级</strong></p></blockquote><h3 id="2-成员内部类访问外部类"><a href="#2-成员内部类访问外部类" class="headerlink" title="(2) 成员内部类访问外部类"></a>(2) 成员内部类访问外部类</h3><p>(2-1) 成员内部类可以无条件访问外部类的所有属性和方法（包括私有属性和私有方法）</p><blockquote><p>为什么？</p><p>因为成员内部类和成员方法同级。</p><p>成员方法 可以访问 本类中的私有属性和私有方法</p><p>成员内部类 也可以访问 外部类中的私有属性和私有方法</p></blockquote><p>(2-2) 成员内部类访问外部类的同名属性和同名方法：</p><ul><li>外部类.this.同名属性</li><li>外部类.this.同名方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Outer &#123;</span><br><span class="line">    &#x2F;&#x2F; 成员变量</span><br><span class="line">    private int num &#x3D; 99;</span><br><span class="line">    private int num2 &#x3D; 55;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 成员内部类</span><br><span class="line">    class Inner &#123;</span><br><span class="line">        private int num2 &#x3D; 66;</span><br><span class="line">        </span><br><span class="line">        public void innerMethod()&#123;</span><br><span class="line">            &#x2F;&#x2F; 内部类访问外部类的私有属性（不同名）</span><br><span class="line">            System.out.println(num);    &#x2F;&#x2F;99</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F; 内部类访问外部类的私有属性（同名）</span><br><span class="line">            System.out.println(num2);   &#x2F;&#x2F;66</span><br><span class="line">            System.out.println(Outer.this.num2);    &#x2F;&#x2F;55</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-外部类访问成员内部类"><a href="#3-外部类访问成员内部类" class="headerlink" title="(3) 外部类访问成员内部类"></a>(3) 外部类访问成员内部类</h3><ul><li>创建内部类对象 (2种方式)：<code>外部类.内部类 inner = new 外部类().new 内部类();</code></li><li>访问内部类的成员：<code>inner.内部类属性;</code> —- <code>inner.内部类方法()</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args)  &#123;</span><br><span class="line">        &#x2F;&#x2F; 第一种方式：创建内部类对象</span><br><span class="line">        Outer.Inner inner &#x3D; new Outer().new Inner();  &#x2F;&#x2F;必须通过Outter对象来创建</span><br><span class="line">        &#x2F;&#x2F; 调用内部类对象的方法</span><br><span class="line">        inner.innerMethod();</span><br><span class="line">        &#x2F;&#x2F; 第二种方式：创建内部类对象</span><br><span class="line">        Outer.Inner inner1 &#x3D; outer.getInnerInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Outer &#123;</span><br><span class="line">    &#x2F;&#x2F; 成员变量</span><br><span class="line">    private int num &#x3D; 99;</span><br><span class="line">    private int num2 &#x3D; 55;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 成员内部类</span><br><span class="line">    class Inner &#123;</span><br><span class="line">        private int num2 &#x3D; 66;</span><br><span class="line"></span><br><span class="line">        public void innerMethod()&#123;</span><br><span class="line">            &#x2F;&#x2F; 内部类访问外部类的私有属性（不同名）</span><br><span class="line">            System.out.println(num);    &#x2F;&#x2F;99</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 内部类访问外部类的私有属性（同名）</span><br><span class="line">            System.out.println(num2);   &#x2F;&#x2F;66</span><br><span class="line">            System.out.println(Outer.this.num2);    &#x2F;&#x2F;55</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-成员内部类的权限问题"><a href="#4-成员内部类的权限问题" class="headerlink" title="(4) 成员内部类的权限问题"></a>(4) 成员内部类的权限问题</h3><p>内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限。</p><p>和外部类有一点不一样，外部类只能被public和包访问两种权限修饰。</p><p>由于成员内部类看起来像是外部类的一个成员，所以可以像类的成员一样拥有多种权限修饰。</p><p>如果成员内部类Inner用private修饰，则只能在外部类的内部访问，如果用public修饰，则任何地方都能访问；如果用protected修饰，则只能在同一个包下或者继承外部类的情况下访问；如果是默认访问权限，则只能在同一个包下访问。</p><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/01/30/hello-world/"/>
    <url>/2020/01/30/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
