<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>设计模式 代理模式</title>
      <link href="/2020/02/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/02/03/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><h3 id="1-静态代理的优劣"><a href="#1-静态代理的优劣" class="headerlink" title="1. 静态代理的优劣"></a>1. 静态代理的优劣</h3><p>优点：</p><blockquote><p>可以使真实角色（被代理角色）的操作更加纯粹，不用关注一些公共的业务</p><p>将公共业务交给代理角色，实现业务分工</p><p>公共业务发生扩展时，方便集中管理</p></blockquote><p>缺点：</p><blockquote><p>一个真实角色（被代理角色）就会产生一个代理角色，代码量翻倍，开发效率变低</p></blockquote><h3 id="2-实例"><a href="#2-实例" class="headerlink" title="2. 实例"></a>2. 实例</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200203082035.png" alt=""></p><h4 id="1-接口"><a href="#1-接口" class="headerlink" title="(1) 接口"></a>(1) 接口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Rent</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-被代理角色"><a href="#2-被代理角色" class="headerlink" title="(2) 被代理角色"></a>(2) 被代理角色</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东正在出租房屋..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-代理角色"><a href="#3-代理角色" class="headerlink" title="(3) 代理角色"></a>(3) 代理角色</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HouseProxy</span> <span class="token keyword">implements</span> <span class="token class-name">Rent</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Host host<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHost</span><span class="token punctuation">(</span>Host host<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HouseProxy</span><span class="token punctuation">(</span>Host host<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">HouseProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 代替“被代理角色”做事</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        host<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-测试（客户）"><a href="#4-测试（客户）" class="headerlink" title="(4) 测试（客户）"></a>(4) 测试（客户）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// “被代理角色”</span>        Host host <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// "代理角色" 与 “被代理角色” 接触</span>        HouseProxy houseProxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HouseProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        houseProxy<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 用户与“代理角色”接触，并完成事务</span>        houseProxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="静态代理（加深理解）"><a href="#静态代理（加深理解）" class="headerlink" title="静态代理（加深理解）"></a>静态代理（加深理解）</h2><h3 id="1-导读"><a href="#1-导读" class="headerlink" title="1. 导读"></a>1. 导读</h3><p>当一个Service中的每个方法都需要加上业务细节处理（如计算运行时间）时，如果将这些代码直接添加在每个方法中，无疑会降低代码的可读性，甚至还会导致代码出现问题。</p><p>因此，我们需要在不修改代码的基础上，使用代理来添加这些和业务不相干的代码。</p><h3 id="2-实例-1"><a href="#2-实例-1" class="headerlink" title="2. 实例"></a>2. 实例</h3><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200203083140.png" style="zoom:67%;" /><h4 id="1-接口-1"><a href="#1-接口-1" class="headerlink" title="(1) 接口"></a>(1) 接口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="2-被代理角色-1"><a href="#2-被代理角色-1" class="headerlink" title="(2) 被代理角色"></a>(2) 被代理角色</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"增加了一个用户.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除了一个用户.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"修改了一个用户.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询了一个用户.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-代理角色-1"><a href="#3-代理角色-1" class="headerlink" title="(3) 代理角色"></a>(3) 代理角色</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceProxy</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> UserServiceImpl userService<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserService</span><span class="token punctuation">(</span>UserServiceImpl userService<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userService <span class="token operator">=</span> userService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"delete"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"update"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"query"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userService<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 日志方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[debug] 使用了"</span> <span class="token operator">+</span> msg <span class="token operator">+</span> <span class="token string">"方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-测试"><a href="#4-测试" class="headerlink" title="(4) 测试"></a>(4) 测试</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserServiceImpl userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        UserServiceProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">setUserService</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>静态代理在不修改代码的情况下进行了纵向开发，但是有一个缺点：</p><blockquote><p>一个 “被代理角色” 就会对应产生一个 “代理角色”</p></blockquote><p>这无疑会让我们代码量成倍增多，使得开发效率变低，项目臃肿。</p><p>那么我们要思考：</p><blockquote><p>有没有什么方法能够一次性的为所有的“被代理角色” 产生“代理角色” ？</p></blockquote><p>答案是：有！那就是动态代理</p><h3 id="1-动态代理-概述"><a href="#1-动态代理-概述" class="headerlink" title="1. 动态代理 概述"></a>1. 动态代理 概述</h3><p><font color="red">动态代理的底层：反射</font></p><p>与静态代理的一对一模式不同，动态代理的代理类是动态生成的，而不是写死的。</p><h3 id="2-动态代理的分类"><a href="#2-动态代理的分类" class="headerlink" title="2. 动态代理的分类"></a>2. 动态代理的分类</h3><blockquote><p><strong>基于接口的动态代理：<code>JDK动态代理</code></strong></p><p>基于类的动态代理：<code>cglib</code>，<code>java字节码 JAVAssist</code></p></blockquote><p>这边使用的是：JDK动态代理</p><h3 id="3-动态代理的好处"><a href="#3-动态代理的好处" class="headerlink" title="3. 动态代理的好处"></a>3. 动态代理的好处</h3><blockquote><p>可以使真实角色（被代理角色）的操作更加纯粹，不用关注一些公共的业务</p><p>将公共业务交给代理角色，实现业务分工</p><p>公共业务发生扩展时，方便集中管理</p><p>一个动态代理类代理的是一个接口，这个接口可以修改</p><p>一个动态代理类可以代理实现同一接口的多个类</p></blockquote><h3 id="4-JDK动态代理"><a href="#4-JDK动态代理" class="headerlink" title="4. JDK动态代理"></a>4. JDK动态代理</h3><p>需要了解2个类：</p><blockquote><p>java.lang.reflect.Proxy类（代理）</p><p>java.lang.reflect.InvocationHandler接口（调用处理程序）</p><blockquote><p> invoke(Object proxy, method method, Object[] args)：处理被代理对象的方法并返回结果</p><p>invoke(被代理对象，被代理对象中的某个方法，方法参数)</p></blockquote></blockquote><h3 id="5-实例"><a href="#5-实例" class="headerlink" title="5. 实例"></a>5. 实例</h3><h4 id="1-代理类（很重要）"><a href="#1-代理类（很重要）" class="headerlink" title="(1)  代理类（很重要）"></a>(1)  代理类（很重要）</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yang<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>trendproxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 会自动生成代理类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 被代理的接口</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 自动生成该接口的代理类</span>    <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 会自动调用该方法：处理代理实例，并返回结果</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过反射处理</span>        <span class="token function">log</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[DEBUG] 执行了"</span> <span class="token operator">+</span> msg <span class="token operator">+</span><span class="token string">"方法..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="2-测试"><a href="#2-测试" class="headerlink" title="(2)  测试"></a>(2)  测试</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserServiceImpl userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ProxyInvocationHandler pih <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置需要代理的接口</span>        pih<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>userService<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 动态生成代理类</span>        UserService proxy <span class="token operator">=</span><span class="token punctuation">(</span>UserService<span class="token punctuation">)</span> pih<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 自动调用invoke方法，扩展业务细节</span>        proxy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java-集合框架(1)</title>
      <link href="/2020/02/02/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-1/"/>
      <url>/2020/02/02/Java-%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6-1/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring-JdbcTemplate (未完)</title>
      <link href="/2020/02/02/Spring-JdbcTemplate/"/>
      <url>/2020/02/02/Spring-JdbcTemplate/</url>
      
        <content type="html"><![CDATA[<h2 id="JdbcTemplate-概述"><a href="#JdbcTemplate-概述" class="headerlink" title="JdbcTemplate 概述"></a>JdbcTemplate 概述</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>JdbcTemplate是Spring提供的一个对象，是对原始Jdbc API对象的简单封装，是一个操作模板类</p><p>常见操作模板类：</p><blockquote><p>操作关系型数据库的：JdbcTemplate、HibernateTemplate</p><p>操作nosql数据库的：RedisTemplate</p><p>操作消息队列的：JmsTemplate</p></blockquote><p>导包</p><blockquote><p>spring-context-5.0.2.RELEASE.jar（spring相关）</p><p>spring-jdbc-5.0.2.RELEASE.jar（jdbc相关）</p><p>spring-tx-5.0.2.RELEASE.jar（事务相关）</p></blockquote><h3 id="JdbcTemplate-的作用"><a href="#JdbcTemplate-的作用" class="headerlink" title="JdbcTemplate 的作用"></a>JdbcTemplate 的作用</h3><p>JdbcTemplate 是用来和数据库进行交互的，实现对表的CRUD操作</p><p>创建 JdbcTemplate 对象</p><h2 id="实例：JdbcTemplate"><a href="#实例：JdbcTemplate" class="headerlink" title="实例：JdbcTemplate"></a>实例：JdbcTemplate</h2><h3 id="0-项目结构"><a href="#0-项目结构" class="headerlink" title="(0)  项目结构"></a>(0)  项目结构</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200202115733.png" alt=""></p><h3 id="1-导包"><a href="#1-导包" class="headerlink" title="(1)  导包"></a>(1)  导包</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h3 id="2-Account实体类"><a href="#2-Account实体类" class="headerlink" title="(2)  Account实体类"></a>(2)  Account实体类</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Float money<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// get set toString</span><span class="token punctuation">}</span></code></pre><h3 id="3-JdbcTemplate操作数据库测试"><a href="#3-JdbcTemplate操作数据库测试" class="headerlink" title="(3)  JdbcTemplate操作数据库测试"></a>(3)  JdbcTemplate操作数据库测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo01</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 0. 准备数据源：spring内部数据源</span>        DriverManagerDataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DriverManagerDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setDriverClassName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setUrl</span><span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/spring"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 1. 创建JdbcTemplate对象</span>        JdbcTemplate jt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jt<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>ds<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 2. 执行操作</span>        jt<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"insert into account(name,money) values('ccc',1000)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-结果"><a href="#4-结果" class="headerlink" title="(4)  结果"></a>(4)  结果</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200202120046.png" alt=""></p><h2 id="实例：JdbcTemplate-IOC"><a href="#实例：JdbcTemplate-IOC" class="headerlink" title="实例：JdbcTemplate + IOC"></a>实例：JdbcTemplate + IOC</h2><h3 id="0-项目结构-1"><a href="#0-项目结构-1" class="headerlink" title="(0) 项目结构"></a>(0) 项目结构</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200202162850.png" alt=""></p><h3 id="1-导包；-2-实体类-同上"><a href="#1-导包；-2-实体类-同上" class="headerlink" title="(1) 导包； (2)实体类  ___ 同上"></a>(1) 导包； (2)实体类  ___ 同上</h3><h3 id="3-持久层接口：AccountDao-java"><a href="#3-持久层接口：AccountDao-java" class="headerlink" title="(3)  持久层接口：AccountDao.java"></a>(3)  持久层接口：<code>AccountDao.java</code></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>    Account <span class="token function">findAccountByName</span><span class="token punctuation">(</span>String accountName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="4-持久层实现类：AccountDaoImpl-java"><a href="#4-持久层实现类：AccountDaoImpl-java" class="headerlink" title="(4)  持久层实现类：AccountDaoImpl.java"></a>(4)  持久层实现类：<code>AccountDaoImpl.java</code></h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setJdbcTemplate</span><span class="token punctuation">(</span>JdbcTemplate jdbcTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>jdbcTemplate <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accountList <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from account where id=?"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> accountList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span>null<span class="token operator">:</span>accountList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountByName</span><span class="token punctuation">(</span>String accountName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accountList <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from account where name=?"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanPropertyRowMapper</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>accountName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>accountList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>accountList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"结果集不唯一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> accountList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"update account set name=?,money=? where id=?"</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="5-Spring配置文件"><a href="#5-Spring配置文件" class="headerlink" title="(5)  Spring配置文件"></a>(5)  Spring配置文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置账户的持久层 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yang.dao.impl.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置JdbcTemplate --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.core.JdbcTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DriverManagerDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/spring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="6-测试"><a href="#6-测试" class="headerlink" title="(6)  测试"></a>(6)  测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取容器</span>        ApplicationContext context <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取对象</span>        AccountDao accountDao <span class="token operator">=</span> <span class="token punctuation">(</span>AccountDao<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountDao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Account account01 <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account01<span class="token punctuation">)</span><span class="token punctuation">;</span>        Account account02 <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span><span class="token string">"bbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account02<span class="token punctuation">)</span><span class="token punctuation">;</span>        account01<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account01<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">1111f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>account01<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="7-结果"><a href="#7-结果" class="headerlink" title="(7)  结果"></a>(7)  结果</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200202162824.png" alt=""></p><h2 id="实例：JdbcTemplate-AOP"><a href="#实例：JdbcTemplate-AOP" class="headerlink" title="实例：JdbcTemplate + AOP"></a>实例：JdbcTemplate + AOP</h2>]]></content>
      
      
      <categories>
          
          <category> Spring框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> JdbcTemplate </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-AOP</title>
      <link href="/2020/02/01/Spring-AOP/"/>
      <url>/2020/02/01/Spring-AOP/</url>
      
        <content type="html"><![CDATA[<h1 id="一、AOP概述"><a href="#一、AOP概述" class="headerlink" title="一、AOP概述"></a>一、AOP概述</h1><h3 id="1-什么是AOP？"><a href="#1-什么是AOP？" class="headerlink" title="1. 什么是AOP？"></a>1. 什么是AOP？</h3><blockquote><p>AOP，Aspect Oriented Programming，面向切面编程</p><p>AOP把程序中重复的代码抽取出来，在需要执行时，使用动态代理技术，在不修改源码的基础上，对已有方法进行增强</p></blockquote><h3 id="2-AOP的作用？"><a href="#2-AOP的作用？" class="headerlink" title="2. AOP的作用？"></a>2. AOP的作用？</h3><blockquote><p>在程序运行期间，不修改源码对方法进行增强</p></blockquote><h3 id="3-AOP的优势？"><a href="#3-AOP的优势？" class="headerlink" title="3. AOP的优势？"></a>3. AOP的优势？</h3><blockquote><p>减少程序代码</p><p>提高开发效率</p><p>维护方便</p></blockquote><h3 id="4-AOP的实现方式"><a href="#4-AOP的实现方式" class="headerlink" title="4. AOP的实现方式"></a>4. AOP的实现方式</h3><blockquote><p> 动态代理技术</p></blockquote><h3 id="5-AOP要明确的事情"><a href="#5-AOP要明确的事情" class="headerlink" title="5. AOP要明确的事情"></a>5. AOP要明确的事情</h3><p><strong>开发阶段（程序员开发）</strong></p><blockquote><p>编写核心业务代码（开发主线）</p><p>把公用代码抽取出来，制作成通知（代码可重用）</p><p>在配置文件中，声明切入点与通知之间的关系，即切面（定义切面）</p></blockquote><p><strong>运行阶段（Spring框架完成）</strong></p><blockquote><p><font color="red">Spring框架监控切入点方法的执行，当监控到切入点方法被执行，使用代理机制，动态创建目标对象的代理对象，根据通知类别，在代理对象的对应位置，将通知对应的功能织入，完成完整的代码论及运行。</font></p></blockquote><h1 id="二、AOP-相关术语"><a href="#二、AOP-相关术语" class="headerlink" title="二、AOP 相关术语"></a>二、AOP 相关术语</h1><p>在spring中，是通过配置的方式，实现AOP功能。</p><table><thead><tr><th>AOP术语</th><th>含义</th></tr></thead><tbody><tr><td>连接点（Joinpoint）</td><td>被拦截到的点，在Spring中指的是方法</td></tr><tr><td>切入点（Pointcut）</td><td>对那些被拦截的 joinpoint 的定义</td></tr><tr><td>通知/增强（Advice）</td><td>拦截到Joinpoint后要做的事情<br />通知类型：前置通知 | 后置通知 | 环绕通知 | 最终通知 | 异常通知</td></tr><tr><td>引介（Introduction）</td><td>一种特殊的通知，<br />在不修改代码的前提下，引介可以在运行期为类动态地添加一下方法或属性</td></tr><tr><td>切面（Aspect）</td><td>切入点和通知（引介）的结合</td></tr><tr><td>目标对象（target）</td><td>代理的目标对象，即被代理对象</td></tr><tr><td>织入（Weaving）</td><td>把增强应用到目标对象来创建新的代理对象的过程<br />Spring采用动态代理织入，AspectJ采用编译期织入和类装载期织入</td></tr><tr><td>代理（Proxy）</td><td>一个类被AOP织入增强后，就产生一个结果代理类</td></tr></tbody></table><p>连接点和切入点有什么不同？</p><blockquote><p>类或接口中所有的方法都叫连接点，被增强的方法叫切入点</p><p><strong>切入点一定是连接点，但连接点不一定是切入点</strong></p></blockquote><h1 id="三、AOP案例（4种通知）"><a href="#三、AOP案例（4种通知）" class="headerlink" title="三、AOP案例（4种通知）"></a>三、AOP案例（4种通知）</h1><h4 id="0-项目结构"><a href="#0-项目结构" class="headerlink" title="(0).  项目结构"></a>(0).  项目结构</h4><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200201171424.png" alt=""></p><h4 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="(1).  导入依赖"></a>(1).  导入依赖</h4><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 织入包，解析切入点表达式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h4 id="2-业务层接口"><a href="#2-业务层接口" class="headerlink" title="(2).  业务层接口"></a>(2).  业务层接口</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 保存账户：无返回值无参</span>    <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 更新账户：无返回值有参</span>    <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 删除账户：有返回值无参</span>    <span class="token keyword">int</span> <span class="token function">deleteAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="3-业务层实现类"><a href="#3-业务层实现类" class="headerlink" title="(3).  业务层实现类"></a>(3).  业务层实现类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了保存.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了更新.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了删除.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="4-通知类"><a href="#4-通知类" class="headerlink" title="(4).  通知类"></a>(4).  通知类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yang<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 用于记录日志的工具类，提供了公共的代码 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 打印日志，</span>    <span class="token comment" spellcheck="true">// 前置通知：在切入点方法执行前执行（切入点方法：业务层方法）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforePrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类的BeforePrintLog方法---开始记录日志~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 后置通知：在切入点方法执行后执行（切入点方法：业务层方法）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturningPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类的AfterReturningPrintLog方法---开始记录日志~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 异常通知：在切入点方法执行前执行（切入点方法：业务层方法）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowingPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类的AfterPrintLog方法---开始记录日志~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 最终通知：在切入点方法执行前执行（切入点方法：业务层方法）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类的AfterPrintLog方法---开始记录日志~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="5-spring配置文件"><a href="#5-spring配置文件" class="headerlink" title="(5).  spring配置文件"></a>(5).  spring配置文件</h4><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置spring的ioc，把service对象配置进来 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yang.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置AOP        1. 把通知Bean交给spring管理：Logger类        2. 使用aop:config标签: 表明开始AOP的配置           (1)使用aop:aspect标签: 表明配置切面                id: 切面的唯一标识                ref: 指定通知类的beanid           (2)使用对应标签配置通知类型                aop:before标签: 配置前置通知，在切入点方法执行之前执行                aop:after-returning标签: 配置后置通知，在切入点方法正常执行之后执行，它和异常通知只能执行一个                 aop:after-throwing标签: 配置异常通知，在切入点方法产生异常之后执行，它和后置通知只能执行一个                aop:after标签: 配置最终通知，在切入点方法是否正常执行都会在其后执行                     method属性: 指定通知类中哪个方法是前置通知                    pointcut属性: 指定切入点表达式，对业务层中哪些方法进行增强           (3)使用aop:pointcut标签：配置切入点表达式                写在aop:aspect内部时，只能当前切面使用                写在aop:aspect外部时，所有切面均可使用【注意：必须写在aop:aspect标签前面才可读取到】    --></span>    <span class="token comment" spellcheck="true">&lt;!--  配置通知类--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yang.utils.Logger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置AOP --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置切入点表达式：id指定表达式的唯一标识，expression指定表达式内容 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.yang.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置前置通知 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beforePrintLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置后置通知--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-returning</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterReturningPrintLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-returning</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置异常通知 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after-throwing</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterThrowingPrintLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after-throwing</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置最终通知 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterPrintLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200201174330.png" style="zoom:67%;" /><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200201174608.png" style="zoom:67%;" /><h5 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h5><pre><code>格式：execution(表达式)标准写法：【访问修饰符可省略】    public void com.demo.service.impl.XxxServiceImpl.xxXXX()通配写法：(1).返回值：可以使用通配符，表示任意返回值    * void com.demo.service.impl.XxxServiceImpl.xxXXX()(2).包名：可以使用通配符，表示任意包，一个包一个*    * *.*.*.*.XxxServiceImpl.xxXXX()【访问修饰符可省略】    包名还可以使用 .. 表示当前包及其子包    * *..XxxServiceImpl.xxXXX()(3).类名和方法名：可以使用通配符    * *..*.*()(4).参数列表：可以直接写数据类型，基本数据类型直接写名称，引用类型写包名.类名    * *..*.*(int, java.lang.String)    可以使用通配符表示任意类型，但是必须有参数    * *..*.*(*,*)    可以使用..表示有无参数均可，参数可以是任意类型    * *..*.*(..)(5).全通配写法：* *..*.*(..) 实际项目开发中，一般切到业务层下的所有方法</code></pre><h4 id="6-测试类"><a href="#6-测试类" class="headerlink" title="(6).  测试类"></a>(6).  测试类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AOPTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AccountService as <span class="token operator">=</span> <span class="token punctuation">(</span>AccountService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        as<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        as<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        as<span class="token punctuation">.</span><span class="token function">deleteAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="7-输出结果"><a href="#7-输出结果" class="headerlink" title="(7).  输出结果"></a>(7).  输出结果</h4><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200201175650.png" style="zoom:67%;" /><h1 id="四、AOP案例（环绕通知）"><a href="#四、AOP案例（环绕通知）" class="headerlink" title="四、AOP案例（环绕通知）"></a>四、AOP案例（环绕通知）</h1><h1 id="五、基于注解的AOP案例"><a href="#五、基于注解的AOP案例" class="headerlink" title="五、基于注解的AOP案例"></a>五、基于注解的AOP案例</h1><h3 id="注解-XML文件配置AOP"><a href="#注解-XML文件配置AOP" class="headerlink" title="注解 + XML文件配置AOP"></a>注解 + XML文件配置AOP</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200202090207.png" alt=""></p><p>需要注意的是，注意配置的后置通知或异常通知是在最终通知之后的。</p><p>而使用环绕通知的话，则是正常顺序。</p><p><font color="red">因此注解配置AOP一般使用环绕通知</font></p><h3 id="纯注解配置AOP"><a href="#纯注解配置AOP" class="headerlink" title="纯注解配置AOP"></a>纯注解配置AOP</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200202091426.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Spring框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring-IOC</title>
      <link href="/2020/01/30/Spring-IOC/"/>
      <url>/2020/01/30/Spring-IOC/</url>
      
        <content type="html"><![CDATA[<h2 id="IOC初体验"><a href="#IOC初体验" class="headerlink" title="IOC初体验"></a>IOC初体验</h2><h3 id="0-Maven工程结构"><a href="#0-Maven工程结构" class="headerlink" title="(0).  Maven工程结构"></a>(0).  Maven工程结构</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200130223516.png" alt=""></p><h3 id="1-导入依赖"><a href="#1-导入依赖" class="headerlink" title="(1)  导入依赖"></a>(1)  导入依赖</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.0.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这个依赖包括以下jar包：</p><blockquote><p>Maven: org.springframework:spring-aop:5.0.2.RELEASE    （AOP）<br>Maven: org.springframework:spring-beans:5.0.2.RELEASE    （IOC）<br>Maven: org.springframework:spring-context:5.0.2.RELEASE    （IOC）<br>Maven: org.springframework:spring-core:5.0.2.RELEASE    （IOC）<br>Maven: org.springframework:spring-expression:5.0.2.RELEASE    （IOC）<br>Maven: org.springframework:spring-jcl:5.0.2.RELEASE    （日志包 common-logging）</p></blockquote><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200130221442.png" alt=""></p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200130225721.png" style="zoom:67%;" /><h3 id="2-配置文件：applicationContext-xml"><a href="#2-配置文件：applicationContext-xml" class="headerlink" title="(2).  配置文件：applicationContext.xml"></a>(2).  配置文件：<code>applicationContext.xml</code></h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 把对象的创建交给spring来管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yang.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yang.dao.impl.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="3-测试"><a href="#3-测试" class="headerlink" title="(3).  测试"></a>(3).  测试</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yang<span class="token punctuation">.</span>ui<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yang<span class="token punctuation">.</span>dao<span class="token punctuation">.</span>AccountDao<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yang<span class="token punctuation">.</span>service<span class="token punctuation">.</span>AccountService<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yang<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>ClassPathXmlApplicationContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 获取spring的IOC核心容器，并根据id获取对象     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AccountService as <span class="token operator">=</span> <span class="token punctuation">(</span>AccountService<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AccountDao ad <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>AccountDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ad<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-输出结果"><a href="#4-输出结果" class="headerlink" title="(4).  输出结果"></a>(4).  输出结果</h3><pre><code>com.yang.service.impl.AccountServiceImpl@448ff1a8com.yang.dao.impl.AccountDaoImpl@1a38c59b</code></pre><h2 id="核心容器的两个接口"><a href="#核心容器的两个接口" class="headerlink" title="核心容器的两个接口"></a>核心容器的两个接口</h2><p><strong>ApplicationContext（适用于单例对象）：</strong></p><p>在构建核心容器时，采用【立即加载】的方式创建对象，即一读取完配置文件马上创建配置文件中的对象</p><p>BeanFactory（适用于多例对象）：</p><p>在构建核心容器时，采用【延迟加载】的方式创建对象，即根据id获取对象时才创建配置文件中的对象</p><h2 id="ApplicationContext的三个常用实现类"><a href="#ApplicationContext的三个常用实现类" class="headerlink" title="ApplicationContext的三个常用实现类"></a>ApplicationContext的三个常用实现类</h2><p>ClassPathXmlApplicationContext：可以加载类路径下的配置文件【项目里】</p><p>FileSystemXmlApplicationContext：可以加载磁盘任意路径下的配置文件（必须有访问权限）【本地电脑里】</p><p>AnnotationConfigApplicationContext：用于读取注解创建容器的【项目里】</p><h2 id="Spring创建bean的细节"><a href="#Spring创建bean的细节" class="headerlink" title="Spring创建bean的细节"></a>Spring创建bean的细节</h2><h3 id="bean的三种创建方式"><a href="#bean的三种创建方式" class="headerlink" title="bean的三种创建方式"></a>bean的三种创建方式</h3><p><strong>第一种：使用默认构造函数创建</strong></p><p>在Spring的配置文件中使用bean标签，配置id和class之后，且没有其他属性和标签时。</p><p>采用的时默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建</p><blockquote><p>问：为什么是无参构造函数，而不是有参构造函数？</p><p>因为IOC核心容器是通过反射创建bean对象的，而创建一个不带属性的bean，需要使用对应类的无参构造函数来创建。</p></blockquote><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200130231925.png" alt=""></p><p><strong>方法二：使用普通类中的方法的返回值创建对象，并存入spring容器中</strong></p><pre><code>等价于：【对象.方法】InstanceFactory instanceFactory  = new InstanceFactory();AccountDao accountDao = instanceFactory.getAccount();</code></pre><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200130234740.png" alt=""></p><p><strong>方法三：使用某个类中的静态方法创建对象</strong></p><pre><code>等价于：【类.静态方法】，静态方法也可以使用方式二AccountDao accountDao = StaticFactory.getAccount();</code></pre><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200131000342.png" alt=""></p><h3 id="bean的作用范围"><a href="#bean的作用范围" class="headerlink" title="bean的作用范围"></a>bean的作用范围</h3><p>bean默认是单例的</p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200131000755.png" alt=""></p><p>通过bean标签的scope属性可以指定bean的作用范围</p><blockquote><p>scope属性的取值</p><ul><li>singleton：单例（默认）</li><li>prototype：多例</li><li>request：作用于web应用的请求范围</li><li>session：作用于web应用的会话范围</li><li>global-session：作用于集群环境的会话范围（全局会话范围）</li></ul></blockquote><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200131001443.png" alt=""></p><h3 id="bean对象的生命周期"><a href="#bean对象的生命周期" class="headerlink" title="bean对象的生命周期"></a>bean对象的生命周期</h3><p>单例对象：立即加载，立即销毁</p><blockquote><p>出生：当容器创建时，对象出生</p><p>活着：容器在，对象在</p><p>死亡：容器销毁，对象消亡</p><p>总结——单例对象的生命周期和容器相同</p></blockquote><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200131002614.png" alt=""></p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200131002528.png" alt=""></p><p>多例对象：延迟加载，延迟销毁</p><blockquote><p>出生：使用对象时，spring容器为我们创建</p><p>活着：对象只要在使用过程中，就一直活着</p><p>死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收</p></blockquote><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200131003430.png" alt=""></p><h2 id="IOC初体验（完善）Spring-依赖注入"><a href="#IOC初体验（完善）Spring-依赖注入" class="headerlink" title="IOC初体验（完善）Spring 依赖注入"></a>IOC初体验（完善）Spring 依赖注入</h2><p>在IOC初体验中，我们成功通过配置文件创建了对象，但是无法调用方法；</p><p>因为我们只是创建了对象，但是没有将accountDao对象注入到accountService对象中</p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200130230016.png" alt=""></p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200130230404.png" alt=""></p><h3 id="依赖注入-简介"><a href="#依赖注入-简介" class="headerlink" title="依赖注入 简介"></a>依赖注入 简介</h3><p>DI，Dependency Injection，依赖注入</p><blockquote><p>IOC的作用：降低程序间的耦合（依赖关系）</p><p>什么是依赖关系：在当前类需要用到其他类的对象，由Spring提供，我们只需在配置文件中说明</p><p>依赖关系的维护（管理），就称之为依赖注入</p></blockquote><blockquote><p><strong>依赖注入能注入的数据有3类：</strong></p><p>(1)  基本类型和String</p><p>(2)  其他bean类型（在配置文件中或注解配置过的bean）</p><p>(3)  复杂类型（集合类型）</p><p><strong>注入的方式，有3种：</strong></p><p>(1)  使用构造函数注入</p><p>(2)  使用set方法注入 </p><p>(3)  使用注解注入</p></blockquote><h4 id="使用构造函数注入"><a href="#使用构造函数注入" class="headerlink" title="使用构造函数注入"></a>使用构造函数注入</h4><p>之前创建的bean都是没有属性的，也就是使用默认的无参构造函数通过反射创建的对象。</p><p>若要使用有参构造函数，就需要注入构造函数需要的属性了。</p><blockquote><p>标签：<code>&lt;constructor-arg&gt;</code></p><p>属性：</p><ul><li><p>type：指定要注入的数据的数据类型</p></li><li><p>index：指定要注入的数据在构造函数中的索引位置（从0开始）</p></li><li><p>name：指定要注入的数据的名称（常用）</p><hr></li><li><p>value：提供基本类型和String类型的数据</p></li><li><p>ref：指定在IOC容器中出现的bean对象</p></li></ul></blockquote><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200131010827.png" alt=""></p><p>优势：在获取bean对象时，注入数据是必要的操作，否则对象无法创建成功</p><p>弊端：改变了bean实例化方式，在创建对象时，若用不到某些属性，也需要提供（一个属性都不能少）</p><h4 id="set方法注入"><a href="#set方法注入" class="headerlink" title="set方法注入"></a>set方法注入</h4><blockquote><p>涉及的标签：<code>property</code></p><p>属性：</p><ul><li><p>name：指定注入时所调用的set名称（set去掉，首字母小写）</p></li><li><p>value：提供基本类型和String类型的数据</p></li><li><p>ref：指定在IOC容器中出现的bean对象</p></li></ul></blockquote><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200131012037.png" alt=""></p><p>优势：创建对象时没有明确限制，可以直接使用默认构造函数（不用指明所有属性）</p><p>弊端：若某个成员必须有值，则获取对象时无法保证一定注入（不一定写了set方法，没写就无法注入）</p><h4 id="复杂类型注入"><a href="#复杂类型注入" class="headerlink" title="复杂类型注入"></a>复杂类型注入</h4><blockquote><p>用于给List结构集合注入的标签：<code>&lt;list&gt;,&lt;array&gt;,&lt;set&gt;</code></p><p>用于给Map结构集合注入的标签：<code>&lt;map&gt;,&lt;props&gt;</code></p><p>也就是说，可以互换</p></blockquote><p>实体类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">AccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> myStrs<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> myList<span class="token punctuation">;</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> mySet<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> myMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> Properties myProps<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyStrs</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> myStrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myStrs <span class="token operator">=</span> myStrs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> myList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myList <span class="token operator">=</span> myList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMySet</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> mySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mySet <span class="token operator">=</span> mySet<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> myMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myMap <span class="token operator">=</span> myMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyProps</span><span class="token punctuation">(</span>Properties myProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myProps <span class="token operator">=</span> myProps<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>myStrs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mySet<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myProps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>IOC容器</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yang.service.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myStrs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mySet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testD<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ddd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>测试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ApplicationContext context <span class="token operator">=</span>        <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"applicationContext.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    AccountService as <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>AccountService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    as<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出结果</p><pre><code>[AAA, BBB, CCC][AAA, BBB, CCC][AAA, BBB, CCC]{testA=aaa, testB=bbb}{testD=ddd, testC=ccc}</code></pre><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>(1) . 注解汇总</p><table><thead><tr><th></th><th>注解版</th><th>xml文件版</th></tr></thead><tbody><tr><td>创建对象</td><td>@Component (value=”beanID”)<br />@Repository <br />@Service<br />@Controller<br /></td><td><code>&lt;bean id=&quot;beanID&quot; class=&quot;xxx&quot;&gt;&lt;/bean&gt;</code></td></tr><tr><td>注入数据+对象</td><td>注入bean对象<br />@Autowired<br />@Qualifier (value = “beanID”)<br />@Resource (name=”beanID”)<br />注入基本类型和String类型数据<br />@Value</td><td><code>&lt;property id=&quot;&quot; ref=&quot;&quot;&gt;&lt;/property&gt;</code><br /><code>&lt;property id=&quot;&quot; value=&quot;&quot;&gt;&lt;/property&gt;</code></td></tr><tr><td>改变作用范围</td><td>@Scope</td><td><code>&lt;bean id=&quot;beanName&quot; class=&quot;xxx&quot; scope=&quot;prototype&quot;&gt;&lt;/bean&gt;</code></td></tr><tr><td>生命周期</td><td>@PostConstruct：指定初始化方法<br />@PreDestroy：指定销毁方法</td><td><code>&lt;bean id=&quot;beanName&quot; class=&quot;xxx&quot; init-method=&quot;&quot; destroy-method=&quot;&quot;&gt;&lt;/bean&gt;</code></td></tr></tbody></table><p>@Autowired</p><p>作用：自动按照类型注入</p><p>若IOC容器中有唯一bean对象和要注入的对象类型相匹配，则注入成功</p><p>若有多个，则先匹配对象类型，在匹配bean名  </p><p>@Qualifier (value = “beanId”)</p><p>作用：在按照类型注入的基础上，再按照名称注入</p><p>注意：在给类成员注入时无法单独使用，在给方法参数注入时可以单独使用</p><p>@Resource (name=”beanId”)</p><p>作用：直接按照bean的id注入，可独立使用</p><p>@Value</p><p>作用：注入基本类型和String类型数据</p><p>属性：</p><blockquote><p>value：指定数据的值，可以使用spring的SpEL（spring中的el表达式）</p><p>spEL写法：${表达式}</p></blockquote><p>(2)  案例</p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200131151851.png" alt=""></p><h2 id="注解-配置类"><a href="#注解-配置类" class="headerlink" title="注解 配置类"></a>注解 配置类</h2><p>配置文件可以使用配置类代替，取消使用xml配置文件，改而使用纯注解。这是springboot中常见的配置手段。</p><blockquote><p>配置类的注解：</p><p>@Configuration：</p><blockquote><p> 指定当前类是一个配置类（配置文件）</p></blockquote><p>@ComponentScan (basePackages=”xxx”)</p><blockquote><p>指定spring注解在创建容器时要扫描的包</p></blockquote><p>@Import (value=xxxconfig.class)</p><blockquote><p>导入其他配置类</p></blockquote><p>@Bean (name=”beanID”)</p><blockquote><p>把当前方法的返回值作为bean对象存入spring的ioc容器中，beanID默认是方法名</p><p>注意：当我们使用Bean注解配置方法时，若方法有参数，spring框架回去容器中查找有没有可用的bean对象。查找的方式和@Autowired一致。</p></blockquote><p>@PropertySource (“classpath:db.properties”)</p><blockquote><p>指定properties文件的位置</p></blockquote></blockquote><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200131221427.png" alt=""></p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200202091426.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Spring框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> IOC容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 整合</title>
      <link href="/2020/01/30/SpringBoot%20%E6%95%B4%E5%90%88/"/>
      <url>/2020/01/30/SpringBoot%20%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="将要做的几件事"><a href="#将要做的几件事" class="headerlink" title="将要做的几件事"></a>将要做的几件事</h2><blockquote><p><strong>整合SpringMVC</strong></p><ol><li>修改端口（server.port=8888）</li><li>访问静态资源（classpath:META/resources | classpath:resources | classpath:static |classpath:public）</li><li>配置拦截器<ol><li>自定义拦截器：实现HandlerInterceptor接口</li><li>配置拦截器：自定义一个Java配置类（@Configuration），实现WebMvcConfigurer接口</li></ol></li></ol><p><strong>整合数据源</strong></p><ol><li>引入jdbc启动器，mysql驱动</li><li>添加配置<ol><li>spring.datasource.url</li><li>spring.datasource.username</li><li>spring.datasource.password</li></ol></li></ol><p><strong>整合Mybatis</strong></p><ol><li>引入启动器</li><li>覆盖默认配置<ol><li>mybatis.type-aliases-package=com.yang.boot.bean</li><li>mybatis.mapper-locations=<code>classpath:mybatis/mappers/**/*.xml</code></li><li>代码：定义一个接口，在接口上加入@Mapper注解</li></ol></li></ol><p><strong>整合通用Mapper</strong></p><ol><li>引入启动器</li><li>代码：接口继承<code>Mapper</code></li></ol><p><strong>整合事务</strong></p><ol><li>添加@Transactional</li></ol></blockquote><h2 id="1-整合-SpringMVC"><a href="#1-整合-SpringMVC" class="headerlink" title="1. 整合 SpringMVC"></a>1. 整合 SpringMVC</h2><h3 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200125204045.png" alt="img"></p><p>(0) 项目结构：</p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200125232518.png" alt="img"></p><p>(1) 拦截器： <code>com.yang.demospringmvc.interceptor.MyInterceptor.java</code></p><pre><code>package com.yang.boot.demospringmvc.interceptor;import org.springframework.stereotype.Component;import org.springframework.stereotype.Controller;import org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.ModelAndView;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;@Component  //注册到spring容器中public class MyInterceptor implements HandlerInterceptor {    @Override    public boolean preHandle(HttpServletRequest request,                             HttpServletResponse response,                             Object handler) throws Exception {        System.out.println(&quot;前置方法正在执行...&quot;);        // 返回值 true:放行 false:拦截        return true;    }    @Override    public void postHandle(HttpServletRequest request,                           HttpServletResponse response,                           Object handler,                           ModelAndView modelAndView) throws Exception {        System.out.println(&quot;后置方法正在执行...&quot;);    }    @Override    public void afterCompletion(HttpServletRequest request,                                HttpServletResponse response,                                Object handler,                                Exception ex) throws Exception {        System.out.println(&quot;完成方法正在执行...&quot;);    }}</code></pre><p>(2) 自定义拦截器配置类：<code>com.yang.demospringmvc.config.WebMvcCOnfiguration.java</code></p><pre><code>package com.yang.boot.demospringmvc.config;import com.yang.boot.demospringmvc.interceptor.MyInterceptor;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;/** * 1. 声明这是一个配置类 * 2. 实现 WebMvcConfigurer 接口 */@Configurationpublic class WebMvcConfiguration implements WebMvcConfigurer {    @Autowired    private MyInterceptor myInterceptor;    @Override    public void addInterceptors(InterceptorRegistry registry) {        // &quot;/*&quot;表示所有单级请求   &quot;/**&quot;表示所有多级请求        registry.addInterceptor(myInterceptor).                addPathPatterns(&quot;/**&quot;);    }}</code></pre><p>(3) 控制器：<code>com.yang.demospringmvc.controller.UserController.java</code></p><pre><code>package com.yang.boot.demospringmvc.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controllerpublic class UserController {    @RequestMapping(&quot;hello&quot;)    @ResponseBody    public String hello(){        return &quot;hello&quot;;    }}</code></pre><p>(4) 全局配置文件：<code>application.properties</code></p><pre><code># 修改服务器端口server.port=8888# 修改日志级别logging.level.org.springframework=DEBUG</code></pre><p>(5) 引导类：<code>com.yang.demospringmvc.DemoSpringmvcApplication.java</code></p><pre><code>package com.yang.boot.demospringmvc;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class DemoSpringmvcApplication {    public static void main(String[] args) {        SpringApplication.run(DemoSpringmvcApplication.class, args);    }}</code></pre><p>(6) 输出结果</p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200125232107.png" alt="img"></p><h2 id="2-整合数据源-内置"><a href="#2-整合数据源-内置" class="headerlink" title="2. 整合数据源[内置]"></a>2. 整合数据源[内置]</h2><p><code>SpringBoot</code> 默认数据源为 <code>HikariCP</code>，是一个高性能的JDBC连接池，性能高。</p><p>(1) 引入依赖：<code>pom.xml</code></p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>(2) 全局配置文件：<code>application.properties</code></p><pre><code># 修改服务器端口server.port=8888# 修改日志级别logging.level.org.springframework=DEBUGspring.datasource.url=jdbc:mysql://localhost:3306/springbootspring.datasource.username=rootspring.datasource.password=123456</code></pre><h2 id="3-整合Mybatis"><a href="#3-整合Mybatis" class="headerlink" title="3. 整合Mybatis"></a>3. 整合Mybatis</h2><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126110900.png" alt="img"></p><p>(1) 导入依赖：<code>pom.xml</code></p><pre><code>&lt;!-- mybatis --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- 通用Mapper,作者开发的 --&gt;&lt;dependency&gt;    &lt;groupId&gt;tk.mybatis&lt;/groupId&gt;    &lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;2.0.2&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>(2) 全局配置文件：<code>application.properties</code></p><pre><code># 修改服务器端口server.port=8888# 修改日志级别logging.level.org.springframework=DEBUGspring.datasource.url=jdbc:mysql://localhost:3306/springbootspring.datasource.username=rootspring.datasource.password=123456mybatis.type-aliases-package=com.yang.boot.demospringmvc.bean#mybatis-mapper-locations=clsspath:mybatis/mappers/**/*.xml</code></pre><p>(3) 实体类：<code>com.yang.boot.demospringboot.bean.User.java</code></p><pre><code>package com.yang.boot.demospringmvc.bean;import org.hibernate.validator.constraints.ISBN;import javax.persistence.GeneratedValue;import javax.persistence.GenerationType;import javax.persistence.Id;import javax.persistence.Table;@Table(name = &quot;tb_user&quot;)public class User {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    private String username;    private String password;    //getter setter}</code></pre><p>(4) Mybatis 映射接口：<code>com.yang.boot.demospringboot.mapper.UserMapper.java</code></p><pre><code>package com.yang.boot.demospringmvc.mapper;import com.yang.boot.demospringmvc.bean.User;import org.apache.ibatis.annotations.Mapper;/** * 整合Mybatis：需要实现通用 Mapper 接口 */@Mapperpublic interface UserMapper extends tk.mybatis.mapper.common.Mapper&lt;User&gt; {}</code></pre><h2 id="4-整合事务"><a href="#4-整合事务" class="headerlink" title="4. 整合事务"></a>4. 整合事务</h2><p>Maven已经将<code>org.springframework:spring.tx</code>依赖导入了，因此无需再导入依赖。</p><p>业务层：<code>com.yang.boot.demospringboot.UserService.java</code></p><pre><code>package com.yang.boot.demospringmvc.service;import com.yang.boot.demospringmvc.bean.User;import com.yang.boot.demospringmvc.mapper.UserMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import org.springframework.transaction.annotation.Transactional;@Servicepublic class UserService {    @Autowired    private UserMapper userMapper;    public User queryUserById(Long id){        return this.userMapper.selectByPrimaryKey(id);    }    @Transactional    public void deleteUserById(Long id){        this.userMapper.deleteByPrimaryKey(id);    }}</code></pre><h2 id="测试整合结果"><a href="#测试整合结果" class="headerlink" title="测试整合结果"></a>测试整合结果</h2><pre><code>package com.yang.boot.demospringmvc.controller;import com.yang.boot.demospringmvc.bean.User;import com.yang.boot.demospringmvc.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping(&quot;user&quot;)public class UserController {    @Autowired    private UserService userService;    // 通过ID查询用户    @GetMapping(&quot;{id}&quot;)    @ResponseBody    public User queryUserById(@PathVariable(&quot;id&quot;)Long id){        return this.userService.queryUserById(id);    }    @RequestMapping(&quot;hello&quot;)    @ResponseBody    public String hello(){        return &quot;hello&quot;;    }}</code></pre><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126113739.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 入门</title>
      <link href="/2020/01/30/SpringBoot%20%E5%85%A5%E9%97%A8/"/>
      <url>/2020/01/30/SpringBoot%20%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><h2 id="第一个SprinBoot程序"><a href="#第一个SprinBoot程序" class="headerlink" title="第一个SprinBoot程序"></a>第一个SprinBoot程序</h2><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126134134.png" alt="img"></p><p>引入启动器</p><pre><code>&lt;-- 所有的springboot都要继承该父工程 --&gt;&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.2.4.RELEASE&lt;/version&gt;    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&lt;/parent&gt;&lt;-- web启动器 --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>控制器类</p><pre><code>package com.yang.demo.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controller@RequestMapping(&quot;demo&quot;)public class DemoController {    @RequestMapping(&quot;hello&quot;)    @ResponseBody    public String Hello(){        return &quot;hello springboot!&quot;;    }}</code></pre><p>引导类：</p><pre><code>package com.yang.demo;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** * @SpringBootApplication =  *      * @EnableAutoConfiguration：启用自动配置 *      * @ComponentScan：开启注解扫描 *      * SpringBootConfiguration：作用等同于@Configuration，表示该类是一个配置类，不同的是一个工程只包含一个该注解 */@SpringBootApplicationpublic class DemoApplication {    public static void main(String[] args) {        SpringApplication.run(DemoApplication.class, args);    }}</code></pre><p>输出结果</p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126133018.png" alt="img"></p><h2 id="自定义配置类"><a href="#自定义配置类" class="headerlink" title="自定义配置类"></a>自定义配置类</h2><p>SpringBoot内部已经配置了一百多个配置类（真是贴心啊），我们可以直接使用</p><p>当我们需要其他的配置类时，我们也可以自定义一个配置类</p><p>回顾以前SSM配置数据库连接池的方式：</p><pre><code>&lt;bean name=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSource&quot; init-method=&quot;init&quot; destroy-method=&quot;close&quot;&gt;    &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driverClassName}&quot; /&gt;     &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot; /&gt;    &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot; /&gt;    &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot; /&gt;&lt;/bean&gt;</code></pre><p>SpringBoot使用Java配置类，来代替xml配置：</p><blockquote><p>@Configuration：声明一个类作为配置类，代替<code>xml</code>文件</p><p>@Bean：声明在方法上，将方法的返回值加入spring容器，代替``标签</p><p>@PropertySource：指定外部属性文件</p><p>@Value：属性注入</p></blockquote><h3 id="传统配置类"><a href="#传统配置类" class="headerlink" title="传统配置类"></a>传统配置类</h3><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126135650.png" alt="img"></p><p>引入启动器</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;com.github.drtrang&lt;/groupId&gt;    &lt;artifactId&gt;druid-spring-boot2-starter&lt;/artifactId&gt;    &lt;version&gt;1.1.10&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>jdbc配置文件</p><pre><code>jdbc.driverClassName=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql:///speingbootjdbc.username=rootjdbc.password=123456</code></pre><p>java配置类</p><pre><code>package com.yang.demo.config;import com.alibaba.druid.pool.DruidDataSource;import org.springframework.beans.factory.annotation.Value;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.context.annotation.PropertySource;import javax.sql.DataSource;@Configuration@PropertySource(&quot;classpath:jdbc.properties&quot;)public class jdbcConfiguration {    @Value(&quot;${jdbc.driverClassName}&quot;)    private String driverClassName;    @Value(&quot;${jdbc.url}&quot;)    private String url;    @Value(&quot;${jdbc.username}&quot;)    private String username;    @Value(&quot;${jdbc.password}&quot;)    private String password;    @Bean    public DataSource dataSource(){        DruidDataSource dataSource = new DruidDataSource();        dataSource.setDriverClassName(this.driverClassName);        dataSource.setUrl(this.url);        dataSource.setUsername(this.username);        dataSource.setPassword(this.password);        return dataSource;    }}</code></pre><p>控制器</p><pre><code>package com.yang.demo.controller;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import javax.sql.DataSource;@Controller@RequestMapping(&quot;demo&quot;)public class DemoController {    @Autowired    private DataSource dataSource;    @RequestMapping(&quot;hello&quot;)    @ResponseBody    public String Hello(){        return &quot;hello springboot!&quot;;    }}</code></pre><h3 id="SpringBoot配置类"><a href="#SpringBoot配置类" class="headerlink" title="SpringBoot配置类"></a>SpringBoot配置类</h3><p>接下来使用SpringBoot来进行连接池配置：</p><p>思路：使用SpringBoot内置的属性配置文件，将读取属性的步骤单独抽取出来，达到复用的效果</p><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126153106.png" alt="img"></p><p>属性配置文件：<code>application.properties</code></p><pre><code>jdbc.driverClassName=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql:///speingbootjdbc.username=rootjdbc.password=123456</code></pre><p>读取属性的类</p><pre><code>package com.yang.demo.config;import org.springframework.boot.context.properties.ConfigurationProperties;@ConfigurationProperties(prefix = &quot;jdbc&quot;) //读取资源配置类中，前缀为jdbc的属性public class JdbcProperties {    private String driverClassName;    private String url;    private String username;    private String password;    //getter setter}</code></pre><p>配置类</p><pre><code>package com.yang.demo.config;import com.alibaba.druid.pool.DruidDataSource;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.sql.DataSource;@Configuration@EnableConfigurationProperties(JdbcProperties.class) //启动资源配置读取类public class jdbcConfiguration {    // 方法1 @Autowired注入    @Autowired    private JdbcProperties jdbcProperties;    @Bean     public DataSource dataSource(){        DruidDataSource dataSource = new DruidDataSource();        dataSource.setDriverClassName(this.jdbcProperties.getDriverClassName());        dataSource.setUrl(this.jdbcProperties.getUrl());        dataSource.setUsername(this.jdbcProperties.getUsername());        dataSource.setPassword(this.jdbcProperties.getPassword());        return dataSource;    }}</code></pre><h3 id="属性注入的4种方法"><a href="#属性注入的4种方法" class="headerlink" title="属性注入的4种方法"></a>属性注入的4种方法</h3><p>上述配置类，使用@Autowired注入了属性，还可以采用其他方式注入：</p><pre><code>// 方法1 @Autowired注入@Autowiredprivate JdbcProperties jdbcProperties;// 方法2 构造器参数注入private JdbcProperties jdbcProperties;public jdbcConfiguration(JdbcProperties jdbcProperties){    this.jdbcProperties = jdbcProperties;}// 方法3 作为形参注入@Beanpublic DataSource dataSource(JdbcProperties jdbcProperties){    DruidDataSource dataSource = new DruidDataSource();    dataSource.setDriverClassName(jdbcProperties.getDriverClassName());    dataSource.setUrl(jdbcProperties.getUrl());    dataSource.setUsername(jdbcProperties.getUsername());    dataSource.setPassword(jdbcProperties.getPassword());    return dataSource;}// 方法4 @Bean + @ConfigurationProperties@Configurationpublic class jdbcConfiguration {    // 将jdbcProperties.java的ConfigurationProperties移动到此处    @Bean    @ConfigurationProperties(prefix = &quot;jdbc&quot;) //读取资源配置类中，前缀为jdbc的属性    public DataSource dataSource(){        DruidDataSource dataSource = new DruidDataSource();        return dataSource;    }}</code></pre><h2 id="自动配置原理"><a href="#自动配置原理" class="headerlink" title="自动配置原理"></a>自动配置原理</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot thymeleaf</title>
      <link href="/2020/01/30/SpringBoot%20thymeleaf/"/>
      <url>/2020/01/30/SpringBoot%20thymeleaf/</url>
      
        <content type="html"><![CDATA[<h2 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h2><p>SpringBoot不支持jsp，但是支持一些模板引擎技术</p><p>主流的模板引擎技术：</p><blockquote><p>FreeMarker</p><p>==Thymeleaf==</p><p>Mustache</p></blockquote><p>SpringBoot 常用的模板引擎技术是<code>Thymeleaf</code></p><p><code>Thymeleaf</code>可以完全替代JSP，有以下4个特点：</p><blockquote><p>动静结合（有无网络均可运行）</p><p>开箱即用</p><p>多方言支持</p><p>与SpringBoot完美整合</p></blockquote><pre><code>Thymeleaf`默认解析位置：`src/main/resources/templates/xxx.html</code></pre><h2 id="第一个thymeleaf程序"><a href="#第一个thymeleaf程序" class="headerlink" title="第一个thymeleaf程序"></a>第一个thymeleaf程序</h2><p>以下配置是基于SpringBoot整合的基础上，若没有配置，请移步配置。</p><p>引入启动器</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>修改默认配置：</p><p>thymeleaf会在第一次对模板解析之后进行缓存，提高了并发处理能力</p><p>但是给开发带来了不便（修改页面并不会立即看到效果），因此在<code>开发阶段</code>关闭缓存。</p><pre><code># 关闭thymeleaf缓存spring.thymeleaf.cache=false</code></pre><p>DAO层接口：</p><pre><code>package com.yang.boot.demospringmvc.mapper;import com.yang.boot.demospringmvc.bean.User;import org.apache.ibatis.annotations.Mapper;/** * 整合Mybatis：需要实现通用 Mapper 接口 */@Mapperpublic interface UserMapper extends tk.mybatis.mapper.common.Mapper&lt;User&gt; {}</code></pre><p>业务层：</p><pre><code>package com.yang.boot.demospringmvc.service;import com.yang.boot.demospringmvc.bean.User;import com.yang.boot.demospringmvc.mapper.UserMapper;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.List;@Servicepublic class UserService {    @Autowired    private UserMapper userMapper;    public List&lt;User&gt; queryAllUser(){        return this.userMapper.selectAll();    }}</code></pre><p>控制层：</p><pre><code>package com.yang.boot.demospringmvc.controller;import com.yang.boot.demospringmvc.bean.User;import com.yang.boot.demospringmvc.service.UserService;import org.apache.logging.log4j.message.ReusableMessage;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;import java.util.List;@Controller@RequestMapping(&quot;user&quot;)public class UserController {    @Autowired    private UserService userService;    @GetMapping(&quot;all&quot;)    public String queryAllUser(Model model){        List&lt;User&gt; userList = this.userService.queryAllUser();        model.addAttribute(&quot;userList&quot;,userList);        return &quot;users&quot;;    }}</code></pre><p>静态文件：</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;用户列表&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;        &lt;table border=&quot;1&quot;&gt;            &lt;tr&gt;                &lt;th&gt;ID&lt;/th&gt;                &lt;th&gt;姓名&lt;/th&gt;                &lt;th&gt;密码&lt;/th&gt;            &lt;/tr&gt;            &lt;tr th:each=&quot;user:${userList}&quot;&gt;                &lt;td th:text=&quot;${user.id}&quot;&gt;1&lt;/td&gt;                &lt;td th:text=&quot;${user.username}&quot;&gt;张三&lt;/td&gt;                &lt;td th:text=&quot;${user.password}&quot;&gt;333&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://yanghanblog.oss-cn-hangzhou.aliyuncs.com/newpic/20200126125027.png" alt="img"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java内部类</title>
      <link href="/2020/01/30/java%E5%86%85%E9%83%A8%E7%B1%BB/"/>
      <url>/2020/01/30/java%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>成员内部类 （~成员变量）</p><p>静态成员内部类（~静态成员变量）</p><p>局部内部类（~局部变量）</p><p>匿名内部类</p><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><p>成员内部类，就像是类的成员一样</p><h3 id="1-成员内部类定义的位置"><a href="#1-成员内部类定义的位置" class="headerlink" title="(1) 成员内部类定义的位置"></a>(1) 成员内部类定义的位置</h3><blockquote><p>与成员变量和成员方法<strong>同级</strong></p></blockquote><h3 id="2-成员内部类访问外部类"><a href="#2-成员内部类访问外部类" class="headerlink" title="(2) 成员内部类访问外部类"></a>(2) 成员内部类访问外部类</h3><p>(2-1) 成员内部类可以无条件访问外部类的所有属性和方法（包括私有属性和私有方法）</p><blockquote><p>为什么？</p><p>因为成员内部类和成员方法同级。</p><p>成员方法 可以访问 本类中的私有属性和私有方法</p><p>成员内部类 也可以访问 外部类中的私有属性和私有方法</p></blockquote><p>(2-2) 成员内部类访问外部类的同名属性和同名方法：</p><ul><li>外部类.this.同名属性</li><li>外部类.this.同名方法</li></ul><pre><code>public class Outer {    // 成员变量    private int num = 99;    private int num2 = 55;    // 成员内部类    class Inner {        private int num2 = 66;        public void innerMethod(){            // 内部类访问外部类的私有属性（不同名）            System.out.println(num);    //99            // 内部类访问外部类的私有属性（同名）            System.out.println(num2);   //66            System.out.println(Outer.this.num2);    //55        }    }}</code></pre><h3 id="3-外部类访问成员内部类"><a href="#3-外部类访问成员内部类" class="headerlink" title="(3) 外部类访问成员内部类"></a>(3) 外部类访问成员内部类</h3><ul><li>创建内部类对象 (2种方式)：<code>外部类.内部类 inner = new 外部类().new 内部类();</code></li><li>访问内部类的成员：<code>inner.内部类属性;</code> —- <code>inner.内部类方法()</code></li></ul><pre><code>public class Test {    public static void main(String[] args)  {        // 第一种方式：创建内部类对象        Outer.Inner inner = new Outer().new Inner();  //必须通过Outter对象来创建        // 调用内部类对象的方法        inner.innerMethod();        // 第二种方式：创建内部类对象        Outer.Inner inner1 = outer.getInnerInstance();    }}class Outer {    // 成员变量    private int num = 99;    private int num2 = 55;    // 成员内部类    class Inner {        private int num2 = 66;        public void innerMethod(){            // 内部类访问外部类的私有属性（不同名）            System.out.println(num);    //99            // 内部类访问外部类的私有属性（同名）            System.out.println(num2);   //66            System.out.println(Outer.this.num2);    //55        }    }}</code></pre><h3 id="4-成员内部类的权限问题"><a href="#4-成员内部类的权限问题" class="headerlink" title="(4) 成员内部类的权限问题"></a>(4) 成员内部类的权限问题</h3><p>内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限。</p><p>和外部类有一点不一样，外部类只能被public和包访问两种权限修饰。</p><p>由于成员内部类看起来像是外部类的一个成员，所以可以像类的成员一样拥有多种权限修饰。</p><p>如果成员内部类Inner用private修饰，则只能在外部类的内部访问，如果用public修饰，则任何地方都能访问；如果用protected修饰，则只能在同一个包下或者继承外部类的情况下访问；如果是默认访问权限，则只能在同一个包下访问。</p><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
